package dev.tenacity.module.impl.exploit;

import dev.tenacity.Tenacity;
import dev.tenacity.event.impl.game.WorldEvent;
import dev.tenacity.event.impl.network.PacketReceiveEvent;
import dev.tenacity.event.impl.network.PacketSendEvent;
import dev.tenacity.event.impl.player.BoundingBoxEvent;
import dev.tenacity.event.impl.player.MotionEvent;
import dev.tenacity.event.impl.player.MoveEvent;
import dev.tenacity.event.impl.player.UpdateEvent;
import dev.tenacity.module.Category;
import dev.tenacity.module.Module;
import dev.tenacity.module.impl.combat.TargetStrafe;
import dev.tenacity.module.impl.movement.LongJump;
import dev.tenacity.module.impl.player.InvManager;
import dev.tenacity.module.settings.ParentAttribute;
import dev.tenacity.module.settings.impl.BooleanSetting;
import dev.tenacity.module.settings.impl.MultipleBoolSetting;
import dev.tenacity.module.settings.impl.NumberSetting;
import dev.tenacity.utils.player.BloxdPhysicsUtils;
import dev.tenacity.utils.player.MovementUtils;
import dev.tenacity.utils.server.PacketUtils;
import dev.tenacity.utils.time.TimerUtil;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import net.minecraft.block.Block;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.client.gui.inventory.GuiInventory;
import net.minecraft.init.Blocks;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S12PacketEntityVelocity;
import net.minecraft.network.play.server.S3FPacketCustomPayload;
import net.minecraft.potion.Potion;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.BlockPos;

import java.util.List;
import java.util.stream.Collectors;

public final class Disabler extends Module {

    public static final MultipleBoolSetting disablers = new MultipleBoolSetting("Disablers",
            new BooleanSetting("Watchdog Inventory", false),
            new BooleanSetting("C06->C04", false),
            new BooleanSetting("C04->C06", false),
            new BooleanSetting("Hover", false),
            new BooleanSetting("Spoof Ground", false),
            new BooleanSetting("C0B Cancel", false),
            new BooleanSetting("C0C Spam", false),
            new BooleanSetting("Verus", false),
            new BooleanSetting("Omni Sprint", false),
            new BooleanSetting("Void TP", false),
            new BooleanSetting("MiniBlox C0C",false),
            new BooleanSetting("Silent S08", false),
            new BooleanSetting("Bloxd", false));

    private final NumberSetting hoverHeight = new NumberSetting("Hover Height", 0.1, 5, 0.01, 0.01);
    private final BooleanSetting onGround = new BooleanSetting("On Ground", true);
    private final NumberSetting TPDelay = new NumberSetting("TP Delay", 20, 100, 5, 1);

    private final BooleanSetting bloxdSpider = new BooleanSetting("Spider", true);
    private final BooleanSetting bloxdBoundingBoxFix = new BooleanSetting("Bounding Box Fix", false);
    public final BooleanSetting bloxdDamageBoost = new BooleanSetting("Damage Boost", false);
    public final NumberSetting bloxdDamageSpeed = new NumberSetting("Damage Speed", 1.0, 3.0, 0.5, 0.1);
    public final NumberSetting bloxdDamageTime = new NumberSetting("Damage Time(ms)", 1000, 3000, 100, 100);
    public final BooleanSetting bloxdDamageFlight = new BooleanSetting("Damage Flight", false);
    public final NumberSetting bloxdDamageFlightSpeed = new NumberSetting("Flight Horizontal Speed", 1.0, 3.0, 0.5, 0.1);
    private final NumberSetting bloxdDamageFlightVerticalSpeed = new NumberSetting("Flight Vertical Speed", 0.1, 3.0, 0.0, 0.1);
    public final NumberSetting bloxdDamageFlightTime = new NumberSetting("Flight Time(ms)", 1000, 3000, 100, 100);

    public static boolean spiking;
    public static final TimerUtil spikeTimer = new TimerUtil();
    private int airTicks;

    private int groundTicksLocal;
    private double lastMotionY;
    private boolean wasClimbing;
    private boolean isFalling;
    private boolean receivedS3FSinceLastFalling = false;
    public static int jumpFunny = 0;
    public static long jumpTicks = 0L;
    public long damageBoostStartTime = 0L;
    private boolean wasOnGroundLastTick;
    public long damageFlightStartTime = 0L;
    public boolean flying;
    private boolean c16 = false;
    private boolean c0d = false;

    public Disabler() {
        super("Disabler", Category.EXPLOIT, "Disables some anticheats");
        TPDelay.addParent(disablers, voidTPDisabler -> voidTPDisabler.getSetting("Void TP").isEnabled());
        hoverHeight.addParent(disablers, hoverDisabler -> hoverDisabler.getSetting("Hover").isEnabled());
        onGround.addParent(disablers, spoofGroundDisabler -> spoofGroundDisabler.getSetting("Spoof Ground").isEnabled());

        bloxdSpider.addParent(disablers, disablerSetting -> disablerSetting.getSetting("Bloxd").isEnabled());
        bloxdBoundingBoxFix.addParent(disablers, disablerSetting -> disablerSetting.getSetting("Bloxd").isEnabled());
        bloxdDamageBoost.addParent(disablers, disablerSetting -> disablerSetting.getSetting("Bloxd").isEnabled());
        bloxdDamageSpeed.addParent(bloxdDamageBoost, ParentAttribute.BOOLEAN_CONDITION);
        bloxdDamageTime.addParent(bloxdDamageBoost, ParentAttribute.BOOLEAN_CONDITION);
        bloxdDamageFlight.addParent(disablers, disablerSetting -> disablerSetting.getSetting("Bloxd").isEnabled());
        bloxdDamageFlightSpeed.addParent(bloxdDamageFlight, ParentAttribute.BOOLEAN_CONDITION);
        bloxdDamageFlightVerticalSpeed.addParent(bloxdDamageFlight, ParentAttribute.BOOLEAN_CONDITION);
        bloxdDamageFlightTime.addParent(bloxdDamageFlight, ParentAttribute.BOOLEAN_CONDITION);

        this.addSettings(disablers, TPDelay, onGround, hoverHeight,
                bloxdSpider, bloxdBoundingBoxFix, bloxdDamageBoost, bloxdDamageSpeed, bloxdDamageTime,
                bloxdDamageFlight, bloxdDamageFlightSpeed, bloxdDamageFlightVerticalSpeed, bloxdDamageFlightTime);
    }

    private void resetBloxdModuleState() {
        BloxdPhysicsUtils.resetBloxdPhysicsState();
        groundTicksLocal = 0;
        lastMotionY = 0;
        wasClimbing = false;
        jumpFunny = 0;
        jumpTicks = 0L;
        damageBoostStartTime = 0L;
        wasOnGroundLastTick = false;
        damageFlightStartTime = 0L;
        flying = false;
        isFalling = false;
        receivedS3FSinceLastFalling = false;
    }

    @Override
    public void onEnable() {
        if (disablers.getSetting("Bloxd").isEnabled()) {
            resetBloxdModuleState();
        }
        c16 = false;
        c0d = false;
        super.onEnable();
    }

    @Override
    public void onDisable() {
        if (disablers.getSetting("Bloxd").isEnabled()) {
            BloxdPhysicsUtils.resetBloxdPhysicsState();
            mc.timer.timerSpeed = 1;
            damageBoostStartTime = 0L;
            damageFlightStartTime = 0L;
            flying = false;
        }
        super.onDisable();
    }

    @Override
    public void onUpdateEvent(UpdateEvent event) {
        if (mc.thePlayer == null) return;

        if (disablers.getSetting("Watchdog Inventory").isEnabled()) {
            c16 = false;
            c0d = false;
            InvManager invManager = Tenacity.INSTANCE.getModuleCollection().getModule(InvManager.class);

            boolean invOpen = mc.currentScreen instanceof GuiInventory || (invManager != null && invManager.isEnabled() && invManager.isInvOpen);

            if (invOpen) {
                if (mc.thePlayer.ticksExisted % (mc.thePlayer.isPotionActive(Potion.moveSpeed) ? 3 : 4) == 0) {
                    PacketUtils.sendPacketNoEvent(new C0DPacketCloseWindow());
                } else if (mc.thePlayer.ticksExisted % (mc.thePlayer.isPotionActive(Potion.moveSpeed) ? 3 : 4) == 1) {
                    PacketUtils.sendPacketNoEvent(new C16PacketClientStatus(C16PacketClientStatus.EnumState.OPEN_INVENTORY_ACHIEVEMENT));
                }
            }
        }
    }


    @Override
    public void onMotionEvent(MotionEvent event) {
        final List<BooleanSetting> enabledBooleanSettings = disablers.getBoolSettings().stream().filter(BooleanSetting::isEnabled).collect(Collectors.toList());

        if (enabledBooleanSettings.size() == 1) {
            setSuffix(enabledBooleanSettings.get(0).name);
        } else if (enabledBooleanSettings.size() > 1) {
            setSuffix(enabledBooleanSettings.size() + " Enabled");
        } else {
            setSuffix("None");
        }

        if (disablers.getSetting("Bloxd").isEnabled()) {
            if (!event.isPre()) return;

            EntityPlayerSP player = mc.thePlayer;
            if (player == null) return;

            wasOnGroundLastTick = player.onGround;

            if (player.onGround) {
                groundTicksLocal++;
                if (groundTicksLocal > 5) {
                    jumpFunny = 0;
                }
                isFalling = false;
            } else {
                groundTicksLocal = 0;
                if (player.motionY <= 0 && lastMotionY > 0) {
                    isFalling = true;
                } else if (player.motionY < 0) {
                    isFalling = true;
                } else {
                    isFalling = false;
                }
            }

            if (player.isCollidedVertically && lastMotionY > 0 && player.motionY <= 0) {
                BloxdPhysicsUtils.getBloxdPhysics().getVelocityVector().setY(0.0);
                BloxdPhysicsUtils.getBloxdPhysics().getImpulseVector().setY(0.0);
            }

            lastMotionY = player.motionY;

            if (bloxdDamageFlight.isEnabled() && damageFlightStartTime != 0L) {
                long currentDamageFlightDuration = bloxdDamageFlightTime.getValue().longValue();
                if (System.currentTimeMillis() - damageFlightStartTime > currentDamageFlightDuration) {
                    damageFlightStartTime = 0L;
                    flying = false;
                }
            }
        }

        for (BooleanSetting booleanSetting : disablers.getBoolSettings()) {
            if (booleanSetting.isEnabled()) {
                switch (booleanSetting.name) {
                    case "C0C Spam":
                        PacketUtils.sendPacketNoEvent(new C0CPacketInput());
                        break;
                }
            }
        }
    }

    @Override
    public void onPacketSendEvent(PacketSendEvent event) {
        if (mc.thePlayer == null) return;
        for (BooleanSetting booleanSetting : disablers.getBoolSettings()) {
            if (booleanSetting.isEnabled()) {
                switch (booleanSetting.name) {
                    case "Watchdog Inventory":
                        if (event.getPacket() instanceof C16PacketClientStatus) {
                            if (c16) {
                                event.cancel();
                            }
                            c16 = true;
                        } else if (event.getPacket() instanceof C0DPacketCloseWindow) {
                            if (c0d) {
                                event.cancel();
                            }
                            c0d = true;
                        }
                        break;
                    case "MiniBlox C0C": // Windows11_MEMZ：miniblox修复this.sendQueue.addToSendQueue(new C0CPacketInput(this.moveStrafing, this.moveForward, this.movementInput.jump, this.movementInput.sneak));
                        System.out.println("难绷脑弱哥");
                        break;
                    case "Void TP":
                        if (event.getPacket() instanceof C03PacketPlayer) {
                            final C03PacketPlayer c03 = (C03PacketPlayer) event.getPacket();
                            if (mc.thePlayer.ticksExisted % TPDelay.getValue() == 0) {
                                c03.setY(c03.getPositionY() - 1000);
                            }
                        }
                        break;
                    case "C06->C04":
                        if (event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook) {
                            final C03PacketPlayer.C06PacketPlayerPosLook c06 = (C03PacketPlayer.C06PacketPlayerPosLook) event.getPacket();
                            event.setPacket(new C03PacketPlayer.C04PacketPlayerPosition(c06.getPositionX(), c06.getPositionY(), c06.getPositionZ(), c06.isOnGround()));
                        }
                        break;
                    case "C04->C06":
                        if (event.getPacket() instanceof C03PacketPlayer.C04PacketPlayerPosition) {
                            final C03PacketPlayer.C04PacketPlayerPosition c04 = (C03PacketPlayer.C04PacketPlayerPosition) event.getPacket();
                            event.setPacket(new C03PacketPlayer.C06PacketPlayerPosLook(c04.getPositionX(), c04.getPositionY(), c04.getPositionZ(), mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, c04.isOnGround()));
                        }
                        break;
                    case "Hover":
                        if (event.getPacket() instanceof C03PacketPlayer) {
                            final C03PacketPlayer c03 = (C03PacketPlayer) event.getPacket();
                            c03.setY(mc.thePlayer.posY + hoverHeight.getValue());
                        }
                        break;
                    case "Spoof Ground":
                        if (event.getPacket() instanceof C03PacketPlayer) {
                            final C03PacketPlayer c03 = (C03PacketPlayer) event.getPacket();
                            c03.setOnGround(onGround.isEnabled());
                        }
                        break;
                    case "C0B Cancel":
                        if (event.getPacket() instanceof C0BPacketEntityAction) event.cancel();
                        break;
                    case "Verus":
                        if (event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive)
                            event.cancel();
                        break;
                    case "Omni Sprint":
                        if (event.getPacket() instanceof C0BPacketEntityAction) {
                            final C0BPacketEntityAction c0b = (C0BPacketEntityAction) event.getPacket();
                            if (c0b.getAction().equals(C0BPacketEntityAction.Action.START_SPRINTING)) {
                                if (EntityPlayerSP.serverSprintState) {
                                    PacketUtils.sendPacketNoEvent(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
                                    EntityPlayerSP.serverSprintState = false;
                                }
                            }
                            event.cancel();
                        }
                        break;
                }
            }
        }
    }

    @Override
    public void onPacketReceiveEvent(PacketReceiveEvent event) {
        if (disablers.getSetting("Bloxd").isEnabled()) {
            if (bloxdDamageBoost.isEnabled() || bloxdDamageFlight.isEnabled()) {
                Packet<?> packet = event.getPacket();
                if (packet instanceof S12PacketEntityVelocity) {
                    S12PacketEntityVelocity s12 = (S12PacketEntityVelocity) packet;
                    if (mc.thePlayer != null && s12.getEntityID() == mc.thePlayer.getEntityId()) {
                        if (bloxdDamageBoost.isEnabled() && damageBoostStartTime == 0L) {
                            damageBoostStartTime = System.currentTimeMillis();
                        }
                        if (bloxdDamageFlight.isEnabled() && damageFlightStartTime == 0L) {
                            damageFlightStartTime = System.currentTimeMillis();
                            flying = true;
                        }
                    }
                }
            }

            if (event.getPacket() instanceof S3FPacketCustomPayload) {
                S3FPacketCustomPayload packet = (S3FPacketCustomPayload) event.getPacket();
                String channelName = packet.getChannelName();

                receivedS3FSinceLastFalling = true;

                ByteBuf buffer = packet.getBufferData();
                if (buffer != null) {
                    ByteBuf copiedBuffer = Unpooled.copiedBuffer(buffer);
                    try {
                    } catch (Exception e) {
                        byte[] bytes = new byte[copiedBuffer.readableBytes()];
                        copiedBuffer.readBytes(bytes);
                    } finally {
                        copiedBuffer.release();
                    }
                }

                if (channelName.equals("bloxd:resyncphysics")) {
                    if (packet.getBufferData() != null && packet.getBufferData().readableBytes() >= 12) {
                        float receivedVelocityX = packet.getBufferData().readFloat();
                        float receivedVelocityY = packet.getBufferData().readFloat();
                        float receivedVelocityZ = packet.getBufferData().readFloat();

                        BloxdPhysicsUtils.getBloxdPhysics().getImpulseVector().set(0.0, 0.0, 0.0);
                        BloxdPhysicsUtils.getBloxdPhysics().getForceVector().set(0.0, 0.0, 0.0);
                        BloxdPhysicsUtils.getBloxdPhysics().getVelocityVector().set(receivedVelocityX, receivedVelocityY, receivedVelocityZ);
                        jumpFunny = 0;
                    }
                    damageBoostStartTime = 0L;
                    damageFlightStartTime = 0L;
                    flying = false;
                }
            }
        }

        for (BooleanSetting booleanSetting : disablers.getBoolSettings()) {
            if (booleanSetting.isEnabled()) {
                switch (booleanSetting.name) {
                    case "Silent S08":
                        if (event.getPacket() instanceof S08PacketPlayerPosLook) {
                            final S08PacketPlayerPosLook s08 = (S08PacketPlayerPosLook) event.getPacket();
                            event.cancel();
                            PacketUtils.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(s08.getX(), s08.getY(), s08.getZ(), s08.getYaw(), s08.getPitch(), false));
                        }
                        break;
                }
            }
        }
    }

    @Override
    public void onMoveEvent(MoveEvent e) {
        if (disablers.getSetting("Bloxd").isEnabled()) {
            if (Tenacity.INSTANCE.getModuleCollection().getModule(LongJump.class).isBloxdFlying) {
                return;
            }

            EntityPlayerSP player = mc.thePlayer;
            if (player == null) return;

            TargetStrafe targetStrafe = Tenacity.INSTANCE.getModuleCollection().getModule(TargetStrafe.class);

            if (bloxdDamageFlight.isEnabled() && damageFlightStartTime != 0L && System.currentTimeMillis() - damageFlightStartTime <= bloxdDamageFlightTime.getValue().longValue()) {
                double verticalSpeed = 0;
                if (targetStrafe.active) {
                    return;
                }
                if (mc.gameSettings.keyBindJump.isKeyDown()) {
                    verticalSpeed = bloxdDamageFlightVerticalSpeed.getValue();
                } else if (mc.gameSettings.keyBindSneak.isKeyDown()) {
                    verticalSpeed = -bloxdDamageFlightVerticalSpeed.getValue();
                }

                mc.thePlayer.motionY = verticalSpeed;
                e.setY(verticalSpeed);
                player.fallDistance = 0;

                BloxdPhysicsUtils.getBloxdPhysics().getVelocityVector().setY(0);
                BloxdPhysicsUtils.getBloxdPhysics().getImpulseVector().setY(0);
                BloxdPhysicsUtils.getBloxdPhysics().getForceVector().setY(0);
            } else {
                if (player.onGround && BloxdPhysicsUtils.getBloxdPhysics().getVelocityVector().getY() < 0) {
                    BloxdPhysicsUtils.getBloxdPhysics().getVelocityVector().set(0, 0, 0);
                }

                if (wasOnGroundLastTick && player.motionY > 0.4199 && player.motionY < 0.4201) {
                    if (jumpFunny < 4 && MovementUtils.isMoving()) {
                        jumpFunny++;
                    }
                    BloxdPhysicsUtils.getBloxdPhysics().getImpulseVector().add(0, 8.0, 0);
                    BloxdPhysicsUtils.getBloxdPhysics().getVelocityVector().setY(0.0);
                }

                if (bloxdSpider.isEnabled()) {
                    boolean isMoving = MovementUtils.isMoving();
                    if (player.isCollidedHorizontally && isMoving) {
                        BloxdPhysicsUtils.getBloxdPhysics().getVelocityVector().set(0, 8, 0);
                        wasClimbing = true;
                    } else if (wasClimbing) {
                        BloxdPhysicsUtils.getBloxdPhysics().getVelocityVector().set(0, 0, 0);
                        wasClimbing = false;
                    }
                }

                if (isFalling) {
                    BloxdPhysicsUtils.getBloxdPhysics().getForceVector().add(0, -9.9, 0);
                }

                BloxdPhysicsUtils.getBloxdPhysics().getMotionForTick();
                e.setY(BloxdPhysicsUtils.getBloxdPhysics().getVelocityVector().getY() * BloxdPhysicsUtils.getBloxdPhysics().getDelta());
            }

            double bloxdSpeed = BloxdPhysicsUtils.getBloxdSpeed(player, this);
            float targetYaw = (targetStrafe != null && targetStrafe.isEnabled() && targetStrafe.active) ? targetStrafe.strafeYaw : player.rotationYaw;
            BloxdPhysicsUtils.MutableVec3d moveDir = BloxdPhysicsUtils.getBloxdMoveVec(e.getStrafe(), e.getForward(), bloxdSpeed, targetYaw);
            e.setX(moveDir.getX());
            e.setZ(moveDir.getZ());
        }
    }

    @Override
    public void onBoundingBoxEvent(BoundingBoxEvent e) {
        if (disablers.getSetting("Bloxd").isEnabled() && bloxdBoundingBoxFix.isEnabled()) {
            final BlockPos eventBlockPos = e.getBlockPos();
            final AxisAlignedBB originalBoundingBox = e.getBoundingBox();

            if (mc.theWorld == null || mc.thePlayer == null || eventBlockPos == null || originalBoundingBox == null) {
                e.setBoundingBox(null);
                return;
            }

            Block actualBlock = mc.theWorld.getBlockState(eventBlockPos).getBlock();

            if (actualBlock == null || actualBlock == Blocks.air) {
                e.setBoundingBox(null);
                return;
            }

            double x = eventBlockPos.getX();
            double y = eventBlockPos.getY();
            double z = eventBlockPos.getZ();

            if (actualBlock == Blocks.bed ||
                    actualBlock == Blocks.chest ||
                    actualBlock == Blocks.trapped_chest ||
                    actualBlock == Blocks.enchanting_table ||
                    actualBlock == Blocks.cauldron ||
                    actualBlock == Blocks.snow) {
                e.setBoundingBox(new AxisAlignedBB(x, y, z, x + 1.0, y + 1.0, z + 1.0));
            } else if (actualBlock == Blocks.brewing_stand || actualBlock == Blocks.snow_layer || actualBlock == Blocks.carpet) {
                e.setBoundingBox(new AxisAlignedBB(0.0, 0.0, 0.0, 0.0, 0.0, 0.0));
            } else {
                e.setBoundingBox(new AxisAlignedBB(
                        Math.round(originalBoundingBox.minX), Math.round(originalBoundingBox.minY), Math.round(originalBoundingBox.minZ),
                        Math.round(originalBoundingBox.maxX), Math.round(originalBoundingBox.maxY), Math.round(originalBoundingBox.maxZ)
                ));
            }
        }
    }

    private boolean isBlockUnder() {
        if (mc.thePlayer.posY < 0) return false;
        for (int offset = 0; offset < (int) mc.thePlayer.posY + 2; offset += 2) {
            AxisAlignedBB bb = mc.thePlayer.getEntityBoundingBox().offset(0, -offset, 0);
            if (!mc.theWorld.getCollidingBoundingBoxes(mc.thePlayer, bb).isEmpty()) {
                return true;
            }
        }
        return false;
    }

    @Override
    public void onWorldEvent(WorldEvent event) {
        if (disablers.getSetting("Bloxd").isEnabled()) {
            resetBloxdModuleState();
        }
        c16 = false;
        c0d = false;
    }
}